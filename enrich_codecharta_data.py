import argparse
import csv
import json

def get_json_data(file_name):
    with open(file_name) as json_file:
        return json.load(json_file)

def get_source_code_root(data):
    project_name = data['projectName']
    root_node = data['nodes'][0]

    project_parts = 1
    project_parts += project_name.count(':')
    project_parts += project_name.count('/')

    source_code_root = root_node
    for i in range(project_parts):
        source_code_root = source_code_root['children'][0]

    return source_code_root

def print_nodes(parent_node, path = ""):
    if (len(parent_node['children']) > 0):
        for child_node in parent_node['children']:
            print_nodes(child_node, path + "/" + child_node['name'])
    else:
        print path

def find_node(parent_node, path_elements):
    next_step = path_elements.pop(0)
    for child_node in parent_node['children']:
        if (child_node['name'] == next_step):
            if (len(child_node['children']) > 0):
                return find_node(child_node, path_elements)
            else:
                return child_node
    return None

def parse_codemaat_results(csv_file):
    with open(csv_file) as f:
        csv_reader = csv.DictReader(f)
        if (csv_reader.fieldnames == ['entity', 'n-revs']):
            return parse_codemaat_revisions_analysis(csv_reader)
        else:
            raise Exception('Cannot parse CSV file with header: ' + ",".join(csv_reader.fieldnames))

def parse_codemaat_revisions_analysis(csv_reader):
    result = []
    for row in csv_reader:
        analysis = {
            'file_name': row['entity'],
            'attribute': 'n-revs',
            'value': row['n-revs']
        }
        result.append(analysis)
    return result


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('--sonar-json', help='JSON file generated by CodeCharta from a SonarCube project', required=True)
    parser.add_argument('--codemaat-csv', help='CSV file generated by CodeMaat', required=True)
    args = parser.parse_args()

    # Read in JSON file
    json_data = get_json_data(args.sonar_json)
    source_code_root = get_source_code_root(json_data)

    # Enrich data
    codemaat_analysis = parse_codemaat_results(args.codemaat_csv)
    for analysis in codemaat_analysis:
        file_node = find_node(source_code_root, analysis['file_name'].split("/"))
        if (file_node):
            file_attributes = file_node['attributes']
            file_attributes[analysis['attribute']] = analysis['value']

    # Write out modified JSON data
    with open(args.sonar_json, 'w') as outfile:
        json.dump(json_data, outfile)
